
from os import stat
from aiogram import Bot, Dispatcher, executor
from aiogram import types
from contextlib import suppress
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from asyncio import sleep
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import sqlite3

TOKEN = '5594391007:AAHGebNbF9JGlycU-HivOrPp33XLNnji2oU'

# ? –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ stdout
logging.basicConfig(
    level=logging.INFO,
    format=u"%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)

# ? –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã ---------------------------------------
# —Å –ø—É—Ç—ë–º –¥–æ —Ñ–∞–π–ª–∞ –ë–î —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è. –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –æ–Ω –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º
# –° –ø–æ–ª—è–º–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∂–µ –º–æ–∂–µ—à—å –æ–ø–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
conn = sqlite3.connect("fins.db")
cur = conn.cursor()
cur.execute(
    """CREATE TABLE IF NOT EXISTS finsbot(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    user_id INTEGER,
    username TEXT);
"""
)
conn.commit()
cur.close()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
def put_user(user_id: int, username: str = None) -> None:
    cur = conn.cursor()
    cur.execute("SELECT * FROM finsbot WHERE user_id = ?", (user_id,))
    if user_is_exist := cur.fetchone():
        cur.close()
        return

    cur.execute(
        "INSERT INTO finsbot VALUES (NULL, ?,?)",
        (
            user_id,
            username,
        ),
    )
    conn.commit()
    cur.close()


# * –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–π—Ç—ã –¥–ª—è FSM
class MainStates(StatesGroup):
    antichaos = State()
    crypto = State()


button_1 = types.KeyboardButton('–ö—É—Ä—Å—ã')
button_2 = types.KeyboardButton('–£—Å–ª—É–≥–∏')
button_3 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.add(button_1, button_2, button_3)


ku = types.ReplyKeyboardMarkup(resize_keyboard=True)
b_1 = types.KeyboardButton('Crypto Trip')
b_2 = types.KeyboardButton('Up to Perfection')
ku.add(b_1, b_2)


course_kbd = types.ReplyKeyboardMarkup(resize_keyboard=True)
bt1 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞')
bt2 = types.KeyboardButton('–¢–∞—Ä–∏—Ñ—ã')
bt3 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
bt4 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
course_kbd.add(bt1, bt2, bt3, bt4)


pk1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
bk1 = types.KeyboardButton('–¢–∞—Ä–∏—Ñ—ã')
bk2 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
bk3 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
pk1.add(bk1, bk2, bk3)


op = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üí≥')
item2 = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª—ë–∫(–∫—Ä–∏–ø—Ç–∞)üìà')
back = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
op.add(item1, item2, back)


# state="*" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ª—é–±–æ–º —Å—Ç—ç–π—Ç–µ
@dp.message_handler(commands="start", state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish() # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ Finesse‚ú® \n\nFinesse - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç,"
    "–≤—ã–¥–∞—é—Ç —Å–µ—Ç–∞–ø—ã –∏ –¥–µ–ª—è—Ç—Å—è —Ç–æ—Ä–≥–∞–º–∏, –æ—Ç—Ç–∞—á–∏–≤–∞—é—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º.", reply_markup=greet_kb)
    put_user(message.from_user.id, message.from_user.username)    

@dp.message_handler(text="–ö—É—Ä—Å—ã", state="*")
async def courses(message: types.Message):
    with open('ob.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∫—É—Ä—Å!", reply_markup=ku)


@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", state="*")
async def support(message: types.Message):
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä!\n https://t.me/Manager_Finesse", reply_markup=greet_kb)


@dp.message_handler(text='Crypto Trip', state="*")
async def antishaos(message: types.Message, state: FSMContext):
    await MainStates.antichaos.set() # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–π—Ç. —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å state=MainStates.antichaos
    with open('trip.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ!", reply_markup=course_kbd)


@dp.message_handler(text='Up to Perfection', state="*")
async def crypto_x(message: types.Message):
    await MainStates.crypto.set()
    with open('perf.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ!", reply_markup=course_kbd)


# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ –∞–Ω—Ç–∏—Ö–∞–æ—Å
# state=MainStates.antichaos = —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å—Ç–µ–π—Ç–µ
@dp.message_handler(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", state=MainStates.antichaos)
async def course_prog_antichaos(message: types.Message, state: FSMContext):
    with open('trr.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞!", reply_markup=course_kbd)



# –¢–∞—Ä–∏—Ñ—ã –∞–Ω—Ç–∏—Ö–∞–æ—Å
@dp.message_handler(text="–¢–∞—Ä–∏—Ñ—ã", state=MainStates.antichaos)
async def tarifs_antichaos(message: types.Message, state: FSMContext):
    with open('tripop.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!", reply_markup=op)
    

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—Ä–∏–ø—Ç–æ—Ñ–∏–≥–Ω–∏
@dp.message_handler(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", state=MainStates.crypto)
async def course_prog_crypto(message: types.Message, state: FSMContext):
     with open('prr.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞!", reply_markup=course_kbd)



# –¢–∞—Ä–∏—Ñ—ã –∫—Ä–∏–ø—Ç–æ—Ñ–∏–≥–Ω–∏
@dp.message_handler(text="–¢–∞—Ä–∏—Ñ—ã", state=MainStates.crypto)
async def tarifs_crypto(message: types.Message, state: FSMContext):
    with open('perfop.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!", reply_markup=op)


@dp.message_handler(text='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üí≥', state="*")
async def payment_card(message: types.Message):
    await message.answer(
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã(Tinkoff): 5536 9141 7128 3959 \n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç https://t.me/Manager_Finesse"
        "\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã!\n\n"
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º - Finesse", reply_markup=greet_kb)


@dp.message_handler(text='–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª—ë–∫(–∫—Ä–∏–ø—Ç–∞)üìà', state="*")
async def payment_wallet(message: types.Message):
    with open('kod.jpg', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("BTC (Bitcoin): 1BdoJuPqAPYhwmmJj3v4RKtRkNZu9v12ci\n\nUSDT (TRC20): TKjpkG1YynK9HzBzdigmTZYM7CGb6rq1ur\n\nUSDT (ERC20): 0xd52e0cecac194a5fe09734bafa7e75a481d4c445\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Txid —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ª–∏–±–æ —Ü–∏—Ñ—Ä—ã –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ Binance) –º–µ–Ω–µ–¥–∂–µ—Ä—É:https://t.me/Manager_Finesse\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞!\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º - Finesse", reply_markup=greet_kb)


@dp.message_handler(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", state="*")
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=greet_kb)


@dp.message_handler(text="–£—Å–ª—É–≥–∏", state="*")
async def services(message: types.Message):
    await message.answer("–í –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç Finesse: https://t.me/FinesseService", reply_markup=greet_kb)


if __name__ == "__main__":

    # * –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    try:
        logger.warning("Starting bot")
        executor.start_polling(dp)
    except (KeyboardInterrupt, SystemExit):
        logger.error("Bot stopped!")
